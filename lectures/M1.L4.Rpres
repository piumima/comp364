Module1, Lecture 4: Basics of R
========================================================
author: M Hallett
date: January 2016
autosize:true
font-family: 'Helvetica' 

## vectors, matrices, arrays, lists




R: help
========================================================
* Different forms of help in R but also use google.
```{r}
? matrix
help(matrix)
?? matrix
```

R: help
========================================================
* In RStudio, the result of your help query is in the bottomright window

![R Help](MyFigs/Rhelp.png)

R: example
========================================================

- The <font color=blue><code>example()</code></font color> function (fnc) runs the examples in its help file.

```{r}
example(matrix)
```


R: simple arithmetic 
========================================================
```{r}
2+2 * 3 - 4 / (5 ^ 6) * sqrt(8)
log(18, base=2)

log(32, base=exp(1))
# a comment: exp(1) = e 
# everything after # is ignored by R on a line

```

R: variables of type numeric and  integer 
========================================================
.

```{r}
x <- 7.1 # numeric
y <- 7 # integer
x*y


```
***
.

```{r}

class(x)
class(y)

x == y # double == means a test for equality
```

R: variables of type numeric and  integer 
========================================================
<img src="MyFigs/variables.lecture2.png" alt="variables" style="width: 750px;"/>

R: objects
========================================================
<img src="MyFigs/Objects.png" alt="objects" style="width: 750px;"/>


R: boolean type and operators
========================================================
.
.


```{r}
x <- TRUE; y <- !x; class(x)
(x == !y)
(x != y)
(!x == y)
```
***
.

```{r}
x <- TRUE
y <- FALSE
(x & y); (x | y); (x & !y); xor(x, y)
```

R: assignment vs. tests of equality
========================================================
```{r}
x <- 5
5 -> x
y = 5 # same deal as <-
x == y # boolean test of equality
z <- NA # Not Available (missing value)
is.na(z)
8/0 # huh?
```
R: characters
========================================================
```{r}
x <- "abc"
class(x)
y <- "def"
(x == y)
cat(x, y)
```


R: formulas
========================================================
```{r}
form <- y ~ x*z + b + epsilon
class(form)
```

R: formulas
========================================================
<img src="MyFigs/formulas.png" alt="formulas" style="width: 750px;"/>



R: some important misc. things
========================================================

```{r}
#quit()  (but you have to remove the # at the beginning)
```
If you are using RStudio, it takes care of saving your work space
```

R: some important misc. things
========================================================
.

setwd("~/repos/comp364")  
  # sets working directory
y <- 11 
  # assign y to be 11

sink("my.private.file.R") 
  # sink sends output to file

cat("y <- 11")  


sink()  # back to terminal
```
***
```
y <- 0  
y
[1] 0

source("my.private.file.R")

y
[1] 11

```

R: more important misc. things
========================================================
```{r}
(x <- 7) # the parantheses tell R to print out the result of the expression
ls()  # tells you all the objects in your current R session
rm(x); ls()   # the semicolon can be used to separate commands in R
```


Interrupting an R session: an infinite loop
======================================================== 
<font color="blue"><code><small>
while (1 < 2) { print("Hello World") }
</small></code></font color>

<img src="MyFigs/infiniteloop.png" alt="infinite loop" style="width: 1250px;"/>


R: combine operator c
========================================================
```{r}
x <- c( 1:5 )
y <- c( rep( "hi", times=5 ) ) # repeats the string 5 times
z <- c( sample(1:10) ) # a random permutation of 1 through 10
x; y; z
w <- c( x, y, z)
w
```
R: combine operator c
========================================================
<img src="MyFigs/combine.png" alt="c operator" style="width: 1000px;"/>


R: simple set operations
========================================================
.

```{r}
(x <- c(sort(sample(1:10, 5))))
(y <- c(sort(sample(5:15, 5))))
intersect(x,y)
union(x,y)
```
***
```{r}
setequal( intersect(x, y), intersect(y, x) )
setdiff(y, x); setdiff(x, y)
is.element( 3, y )
```

R: naming elements
========================================================
.
```{r}
bio.molecules <- c( 20000, 200000, 150000)
names(bio.molecules) <- 
      c(
        "genes", "exons", "proteins"  )
bio.molecules
bio.molecules[3]
```
***
```{r}
names(bio.molecules[2])
bio.molecules["exons"]
bio.molecules["genes"] <- 14000
```



R: vectors
========================================================
A one-dimensional list of objects with the same type/mode (e.g. numeric)
```{r}
fibonacci.numbers <- c(1, 1, 2, 3, 5, 8)
fibonacci.numbers[3]            # just the 3rd number in the sequence
fibonacci.numbers[3:5]          # the 3rd through 5th
fibonacci.numbers[-(3:5)]       # everything except the 3rd, 4th, and 5th.
```

R: vectors
========================================================
```{r}
zeroed.integer.vector <- vector( mode="integer", length=6 )

zeroed.integer.vector[3] <- 2
zeroed.integer.vector
```


R: vectors
========================================================

<img src="MyFigs/vectors.matrices.l2.png" alt="vector matrices" style="width: 1000px;"/>


R: matrices
========================================================
.

A two-dimensional list of objects with the same type/mode (e.g. numeric)
```{r}
(A <- matrix( c(5, 7.7, 3.2, 18, 1.7, 9.8, 1.3, 7.3, 8.8), nrow=3, ncol=3))
(B <- matrix( c(17.3, 8, 14.2, 9, 3, 2), nrow=3, ncol=2))
```
***
```{r}  
A*2   # simple scalar mutliplication
```

R: matrices
========================================================
.

```{r}
t(A)  # transpose of m
A * t(A) # element by element products (since both are same size)
```
***
```{r}
A %*% B
```



R: matrices
========================================================
A two-dimensional list of objects with the same type/mode (e.g. numeric)

```{r}
A
b <- c(1.4, 8, 6.3)
# we want to solve for x where A %*% x = b
xxx <- solve(A, b)
xxx
```

R: matrices
========================================================
<img src="MyFigs/arrays1.png" alt="arrays 1" style="width: 1250px;"/>




R: arrays
========================================================
.

For $k \geq 1$, a $k$-dimensional list of objects with the same type/mode (e.g. numeric)
```{r}
RNAseq.data <- array(
 data = rnorm(4*3*2, mean=0, sd=2),
 dim=c(4,3,2),
dimname=c("genes","patients","trials")
)

print(RNAseq.data[,,1], digits=3)
```
***
```{r}
print(RNAseq.data[,,2], digits=3)
print(RNAseq.data[,1,], digits=3)
```

R: lists
========================================================
.

```{r}
patient <- list( "Jane Doe", 81, TRUE, 3, c(0, 0, 1))
# patient[[1]] corresponds to patient name
# patient[[2]] is age
# patient[[3]] is post-menopausal?
# patient[[4]] number of lymph nodes (LN) examined
# patient[[5]] is list of length(patient[[4]]) 
#   here  0 is LN-, and 1 LN+
```
***
```{r}
patient
```

R: lists
========================================================
<img src="MyFigs/Lists.png" alt="lists 1" style="width: 1250px;"/>




R: lists (with names)
========================================================
.

```{r}
patient <- list( 
    name = "Jane Doe", 
    age=81, 
    post.menopausal = TRUE, 
    number.lymph.samples = 3,
    lymph.status = c(0, 0, 1))
```
***
```{r}
patient
```

R: lists within lists
========================================================
.

```{r}
patient <- list( 
  list("Jane", "Doe", "ReMiFaSoLa"), 
  81, 
  TRUE, 
  3, 
  c(0, 0, 1)
)
```
***
```{r}
patient
```

R: lists within lists (how to "index")
========================================================
.

```{r}
patient <- list( list("Jane", "Doe", "ReMiFaSoLa"), 81, TRUE, 3, c(0, 0, 1))

patient[[1]]
```
***
.

```{r}
patient[[1]][[2]]
patient[[5]]
patient[[5]][3]
```

R: lists within lists (indexing is easier with names)
========================================================
.

```{r}
patient <- list( 
  name = list(
        first="Jane", 
        last="Doe", 
        maiden="ReMiFaSoLa"), 
  age=81, 
  post.menopausal = TRUE, 
  number.lymph.samples = 3, 
  lymph.status = c(0, 0, 1)
)
```
***
.

```{r}
patient
```

R: lists within lists (indexing is easier with names)
========================================================
.

```{r}
patient <- list( 
  name = list(
    first="Jane", 
    last="Doe", 
    maiden="ReMiFaSoLa"), 
  age=81, 
  post.menopausal = TRUE, 
  number.lymph.samples = 3, 
  lymph.status = c(0, 0, 1)
)
patient$name$lastpatient$lymph.status
patient$lymph.status[3]
```
***
.

```{r}

patient$name

```

R: lists
========================================================
<img src="MyFigs/ListsExtended.png" alt="lists ex" style="width: 1250px;"/>

R: lists
========================================================
<img src="MyFigs/ListsExtended2.png" alt="lists ex2" style="width: 1250px;"/>

R: lists
========================================================
<img src="MyFigs/ListsExtended3.png" alt="lists ex3" style="width: 1250px;"/>

R: lists
========================================================
<img src="MyFigs/ListsExtended4.png" alt="lists ex4" style="width: 1250px;"/>

R: lists
========================================================
<img src="MyFigs/ListsExtended5.png" alt="lists ex5" style="width: 1250px;"/>




R: [ ] versus [[ ]]
========================================================
.

The single square brackets returns a list; that is, a "slice" of the original list.
```{r}
patient <- list( 
  list(
    "Jane", 
    "Doe", 
    "ReMiFaSoLa"), 
  81, TRUE, 3, 
  c(0, 0, 1)
)

patient[2]    # in this case the slice is just the 2nd element.
```
***
```{r}
patient[3:4]  #  restricted to only the 3rd and 4th elements.
```


R: [ ] versus [[ ]]
========================================================
.

The double square brackets returns the object in the list. This is what you most of the time want
```{r}
patient <- list( 
  list(
    "Jane", 
    "Doe", 
    "ReMiFaSoLa"), 
  81, TRUE, 3, 
  c(0, 0, 1))

patient[[2]]
# patient[[3:4]]  This won't work 
# patient[[c(2,5)]]  This won't work either!
```



R: copying
========================================================
```{r}
name.info <- list( first="Jane", last="Doe", maiden="ReMiFaSoLa" )

patient <- list( name=name.info,
      age=81,
      post.menopausal = TRUE,
      number.lymph.samples = 3,
      lymph.status = c(0, 0, 1))

patient$name$first <- "Jannette"

# what is name.info$first equal to now?
```

R: copying (answer)
========================================================
```{r}
name.info$first
patient$name$first
```

In general, almost everything in R is copied when assigned.

R: c() versus list() concatenation
========================================================
```{r}
patient2 <- list(
  name = list(
          first="Katy",
          last="Perry",
          maiden="Hudson" ),
          # Hudson is her real name
  age = 30,
  # she turns 31 on October 25th
  post.menopausal = FALSE,
  number.lymph.samples = 0,
  lymph.status = c(0, 0, 0)
)
# Daniel's favourite singer
# well sometimes it's Taylor Swift
```

R: c() versus list() concatenation
========================================================
```{r}
weird.database <- c( patient, patient2 )
length(weird.database)
names(weird.database)
weird.database$name
```


R: c() versus list() concatenation
========================================================
* Switch from c() to list().
```{r}
patient.database <- list( patient, patient2 )
length(patient.database)
patient.database[[1]]$name$first
patient.database[[2]]$name$first
```

R: handy feature
========================================================
.

```{r}
my.list <- list()  # generic empty list

my.list
```
Why is this handy sometimes?!? 

Because.
***
```{r}
my.list[[3]] <- 17

my.list
```


COMP-364 & COMP-618 (c) M Hallett, BCI-McGill
========================================================
<img src="MyFigs/sysbiologo.png" alt="BCI-McGill" style="width: 750px;"/>


